// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cli

import (
	"context"
	"github.com/harness/runner/cli/server"
	"github.com/harness/runner/delegateshell"
	"github.com/harness/runner/delegateshell/client"
	"github.com/harness/runner/delegateshell/daemonset"
	"github.com/harness/runner/delegateshell/delegate"
	"github.com/harness/runner/delegateshell/heartbeat"
	"github.com/harness/runner/delegateshell/poller"
	"github.com/harness/runner/delegateshell/vm/pool"
	"github.com/harness/runner/delegateshell/vm/store"
	"github.com/harness/runner/router"
)

// Injectors from wire.go:

func initSystem(ctx context.Context, config *delegate.Config) (*server.System, error) {
	clientClient := client.ProvideManagerClient(config)
	downloader, err := delegateshell.ProvideDownloader()
	if err != nil {
		return nil, err
	}
	daemonSetManager := daemonset.ProvideDaemonSetManager(config, downloader)
	db, err := store.ProvideSQLDatabase(config)
	if err != nil {
		return nil, err
	}
	instanceStore := store.ProvideInstanceStore(db)
	stageOwnerStore := store.ProvideStageOwnerStore(db)
	iManager := pool.ProvideManager(ctx, instanceStore, stageOwnerStore, config)
	taskRouter := router.ProvideRouter(config, downloader, daemonSetManager, iManager, stageOwnerStore)
	daemonSetReconciler := daemonset.ProvideDaemonSetReconciler(daemonSetManager, taskRouter, clientClient)
	pollerPoller := poller.ProvidePoller(clientClient, taskRouter, config)
	keepAlive := heartbeat.ProvideKeepAlive(config, clientClient)
	delegateShell := delegateshell.ProvideDelegateShell(config, clientClient, taskRouter, daemonSetManager, daemonSetReconciler, downloader, pollerPoller, keepAlive)
	system := server.NewSystem(delegateShell, iManager)
	return system, nil
}
